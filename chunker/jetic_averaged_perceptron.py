import time
import perc
import sys
import optparse
import os
import functools

from include.feature_vector import FeatureVector
from include.averaged_perceptron import Learner
# from collections import defaultdict


def retrieve_feature(output, feat_list):
    # This function returns feature vector generated by certain output
    feat_vec = FeatureVector()
    index = 0

    for i in range(1, len(output)-1):
        (index, feats) = perc.feats_for_word(index, feat_list)

        if len(feats) == 0:
            raise ValueError("Returned empty feature")

        for feat in feats:
            feat_vec[feat, output[i]] += 1

    return feat_vec


def argmax(feat_vec, data, tagset, default_tag):
    labeled_list, feat_list = data

    local_output = perc.perc_test(feat_vec,
                                  labeled_list,
                                  feat_list,
                                  tagset,
                                  default_tag)

    local_output.insert(0, 'B_-1')
    local_output.append('B_+1')
    return retrieve_feature(local_output, feat_list)


def f_gold_vec(data):
    labeled_list, feat_list = data

    gold_output = []
    gold_output.append('B_-1')
    for i in labeled_list:
        (w, t, label) = i.split()
        gold_output.append(label)
    gold_output.append('B_+1')

    return retrieve_feature(gold_output, feat_list)


def avg_perc_train(train_data, tagset, iterations=1):
    f_argmax = functools.partial(argmax, tagset=tagset, default_tag=tagset[0])
    learner = Learner()
    return learner.train(train_data,
                         f_argmax=f_argmax,
                         f_gold_vec=f_gold_vec,
                         iterations=iterations)

if __name__ == '__main__':
    optparser = optparse.OptionParser()
    optparser.add_option("-t", "--tagsetfile", dest="tagsetfile", default=os.path.join("data", "tagset.txt"), help="tagset that contains all the labels produced in the output, i.e. the y in \phi(x,y)")
    optparser.add_option("-i", "--trainfile", dest="trainfile", default=os.path.join("data", "train.txt.gz"), help="input data, i.e. the x in \phi(x,y)")
    optparser.add_option("-f", "--featfile", dest="featfile", default=os.path.join("data", "train.feats.gz"), help="precomputed features for the input data, i.e. the values of \phi(x,_) without y")
    optparser.add_option("-e", "--numepochs", dest="numepochs", default=int(10), help="number of epochs of training; in each epoch we iterate over over all the training examples")
    optparser.add_option("-m", "--modelfile", dest="modelfile", default=os.path.join("data", "default.model"), help="weights for all features stored on disk")
    (opts, _) = optparser.parse_args()

    # each element in the feat_vec dictionary is:
    # key=feature_id value=weight
    feat_vec = {}
    tagset = []
    train_data = []

    tagset = perc.read_tagset(opts.tagsetfile)
    print >>sys.stderr, "reading data ..."
    train_data = perc.read_labeled_data(opts.trainfile, opts.featfile)
    print >>sys.stderr, "done."
    start_time = time.time()
    feat_vec = avg_perc_train(train_data, tagset, int(opts.numepochs))
    end_time = time.time()
    print "Total training Time(seconds): %f" % (end_time - start_time,)
    perc.perc_write_to_file(feat_vec, opts.modelfile)
